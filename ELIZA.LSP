
(echo 0)
(defmacro defсопоставитель (символ парам тело)
        (list 'put (list 'quote символ) ''сопоставитель
           (list 'quote (list 'lambda парам тело))))

(defun сопоставь1 (m h &optional пары)
(cond
   ((null m)
      (if (null h) (if пары пары t) nil))
   ((null h)
      (if (equal m '(*)) (if пары пары t) nil))
   ((equal (car m) (car h))
      (сопоставь1 (cdr m) (cdr h) пары))
   ((atom (car m))
      (if (get (car m) 'сопоставитель)
         (funcall
            (get (car m) 'сопоставитель)
                m h пары)
         nil))
   (t (funcall
      (get (first (car m)) 'сопоставитель)
        m h (second (car m)) пары))))

(defсопоставитель ? (m h пары)
   (сопоставь1 (cdr m) (cdr h) пары))

(defсопоставитель + (m h пары)
   (or (сопоставь1 (cdr m) (cdr h) пары)
       (сопоставь1 m (cdr h) пары)))

(defсопоставитель * (m h пары)
   (or (сопоставь1 (cdr m) (cdr h) пары)
       (сопоставь1 (cdr m) h пары)
       (сопоставь1 m (cdr h) пары)))

(defсопоставитель ?> (m h v пары)
   (сопоставь1 (cdr m) (cdr h)
      (acons v (car h) пары) ))

(defсопоставитель +> (m h v пары)
   (or (сопоставь1 (cdr m) (cdr h)
                (добавь v (car h) пары))
       (сопоставь1 m (cdr h)
                (добавь v (car h) пары))))

(defсопоставитель *> (m h v пары)
   (or (сопоставь1 (cdr m) (cdr h)
                (добавь v (car h) пары))
       (сопоставь1 m (cdr h)
                (добавь v (car h) пары))
       (сопоставь1 (cdr m) h пары)))

(defun добавь (имя значение пары)
   (cond
      ((null пары)
        (acons имя значение nil))
      ((eq имя (caar пары))
        (if (atom (cdar пары))
                (acons имя
                   (list (cdar пары) значение)
                   (cdr пары))
                (acons имя
                   (append (cdar пары)
                        (list значение))
                   (cdr пары) )))
      (t (cons (car пары)
        (добавь имя значение (cdr пары))))))

(defсопоставитель < (m h v пары)
   (сопоставь1 (cons (значение v пары)
        (cdr m)) h пары))

(defun значение (имя пары)
   (cdr (assoc имя пары)))

(defсопоставитель p? (m h пред пары)
   (if (funcall пред (car h))
      (сопоставь1 (cdr m) (cdr h) пары)
      nil))

;(сопоставь1 '( (?> x) или (*> y) )
;       '(до или после полудня))
;(сопоставь1 '(? или *)
;       '(до или после полудня))
;(сопоставь1 '(* t r * c t) '(a n t r a c t))
;(сопоставь1 '(* t r * c t) '(a n t r a c s))
;(сопоставь1 '(+ c t) '(o b j e c t))
;(сопоставь1 '(? c *) '((a b) c ((e)) f))
;(сопоставь1 '(? (?> x) (*> y) (< x))
;       '(символ ТОТ-ЖЕ должен быть ТОТ-ЖЕ))
;(сопоставь1 '(? (?> x) (*> y) (< x))
;       '(символ ТОТ-ЖЕ должен быть ТОТ-Ж ТОТ-ЖЕ))
;(сопоставь1 '(? ? (p? numberp) (+> z))
;       '(a b 3 c))

(defun eliza ()
(print '(i am eliza|.| what is your trouble ?))
(do
   ((clause (read) (read)))
   ((null clause)
        '(bye bye|.| welcome again))
   (do*
      ((rules *rules* (cdr rules))
       (rule (car rules) (car rules))
       (bindings))
      ((cond
        ((null rules)
           (print (help-question)))
        ((setq bindings (сопоставь1 (car rule) clause))
           (print (answer (second rule) bindings))))))))

(defun help-question ()
   (nth (random (length *help-questions*))
        *help-questions*))

(defun answer (model pairs &aux v)
 (cond
   ((null model) nil)
   ((atom (car model))
        (cons (car model)
            (answer (cdr model) pairs)))
   ((eq (caar model) '<)
      (setq v (значение (cadar model) pairs))
      (if (atom v)
        (cons v (answer (cdr model) pairs))
        (append v (answer (cdr model) pairs)) ))
   (t (cons (car model)
        (answer (cdr model) pairs)))))

(csetq *help-questions* '(

(what do you mean ?)
(and so ?)
(could you express yourself more clearly ?)
(have we already talked about your dreams ?)
(what a fine weather it is !)
(what do you think about yourself ?)
(what is your main trouble ?)
(who are you ?)
(it is good beginning , isn|'|t it ?) ))

(csetq *rules* '(
((* i cannot (+> x))
        (why cannot you (< x) ?))
((no)
        (please, don|'|t be so short))
((yes *)
        (i understand, but why are you so sure ?))
((* i have a (?> x) *)
        (tell me more about your (< x) ))
((* you are (+> x))
        (what makes you think that i am (< x) ?))
((* i think (*> x) to +)
        (why are you think (< x) ?))
((+ fuck *)
        (do you have a problems in sex ?))
((kiss my (?> x) *)
        (i|'|ll never kiss your (< x) , dirty boy!))
((+ mother *)
        (did you have problems with your family ?))
;((* do you *)
;       (yes, but lets talk me later, please))
((i am *)
        (and how far this began ?))
((+ fucked +)
        (don|'|t be so beasty with me !))
((sorry +)
        (don|'|t worry , i understand you))
((+ my (+> x) *)
        (what do you think about your (< x) ?))
((* because of (*> x))
        (tell me about (< x) ))
((what do you *)
        (i cannot answer this question , i am computer))
((* (+> x) is a +)
        (why (< x) is so interest for you ?))
((* i love *)
        (love is beatiful thing , isn|'|t it ?))
((* i like (+> x))
        (do you really like (< x) ?))
((why +)
        (we must solve this problem together))
((+ really +)
        (you don|'|t now truth , my friend !))
((+ i * never *)
        (why are you so sure in this ?))
                ))