
(echo 0)

(defun унифицируй (x y &optional связи)
(let ((x (значение x связи)) (y (значение y связи)))
   (cond
      ((переменная-p x)
        (cons (list x y) связи))
      ((переменная-p y)
        (cons (list y x) связи))
      ((or (atom x) (atom y))
        (and (eq x y) связи))
      (t (let ((новые-связи (унифицируй (first x) (first y) связи)))
           (and новые-связи
                (унифицируй (rest x) (rest y) новые-связи)))))))

;(defun значение (x связи)
;  (if (переменная-p x)
;      (let ((связь (assoc x связи)))
;       (if (null связь) x
;          (значение (second связь) связи)))
;      x))
; Скомпилирована в LISP.EXE 23.12.97

;(defun переменная-p (x)
;       (and (not (atom x)) (eq (first x) '?)))
; Скомпилирована в LISP.EXE 21.12.97

(defun prolog (&optional программа)
   (prin1 '|? => |)
   (do ((предикат (read) (read)))
       ((eq предикат 'конец) '|До свидания !|)
        (if (= предикат 'добавить) (progn
                (print '|Добавьте предикат в программу:|)
                (push (read) программа)))
        (if (= предикат 'печать) (pprint программа))
        (if (not (atom предикат))
           (докажи (list (поменяй-имена предикат '(0))) '((основа)) 1))
        (prin1 '|? => |) ))

;(defun поменяй-имена (терм уровень)
;; На каждом уровне имена уникальные
;   (cond
;       ((atom терм) терм)
;       ((переменная-p терм)
;          (append терм уровень))
;       (t (cons
;          (поменяй-имена
;               (first терм) уровень)
;          (поменяй-имена
;               (rest терм) уровень)))))
; Скомпилирована в LISP.EXE 04.01.98

(defun докажи (предикаты связи уровень)
;; Докажи предикаты в текущем окружении
   (cond
        ((null предикаты)
           (выведи связи)
           (prin1 '|Еще? (Д/Н) |)
           (eq (read) 'Н))
        (t (докажи-каждый программа
                (rest предикаты)
                (first предикаты)
                связи уровень))))

(defun докажи-каждый (остаток-прогр остаток-пред предикат связи уровень)
;; Докажи предикаты с возвратами
(if (стандартный предикат)
      (and (вычисли предикат) (докажи остаток-пред связи (+ уровень 1)))
   (if (null остаток-прогр) nil
      (let*
        ((теорема
           (поменяй-имена
              (first остаток-прогр)
              (list уровень)))
        (новые-связи
              (унифицируй предикат
                 (first теорема) связи)))
        (cond
           ((null новые-связи)
             (докажи-каждый
                (rest остаток-прогр)
                остаток-пред
                предикат связи уровень))
           ((докажи
                (append (rest теорема) остаток-пред)
                новые-связи
                (+ уровень 1)))
           (t
              (докажи-каждый
                (rest остаток-прогр)
                остаток-пред
                предикат связи уровень)))))))

(defun стандартный (x) (memb (car x) '(eq noteq)))

(defun noteq (x y) (not (eq x y)))

(defun вычисли (предикат)
;; Вычисляет стандартный предикат (н-р (eq (? x) (? y)) )
 (apply (car предикат)
    (mapcar (function (lambda (x) (значение x связи))) (cdr предикат))))

(defun выведи (связи &aux (остаток связи) v)
(loop
   (if (null остаток) (return))
   (setq v (pop остаток))
   (print (cons (car v) (if (переменная-p (second v))
        (cons (second v) (cons (значение (second v) связи)))
        (cdr v)))) ))

;;      Интеллектуальная база данных семьи (программа на Прологе)

(setq семья '(

;; Список всех предикатов (импликаций)
;; Имеют вид : (заключение усл1 усл2 ... услN)
;; переменные обозначаются (? х)

; родственные связи (законы)

  ((дочь (? род) (? дочь))
   (родитель (? дочь) (? род))
   (ж (? дочь)))
  ((сын (? род) (? дочь))
   (родитель (? дочь) (? род))
   (м (? дочь)))
  ((родитель (? x) (? y))
   (отец (? x) (? y)))
  ((родитель (? x) (? y))
   (мать (? x) (? y)))
  ((дедушка (? x) (? y))
   (родитель (? x) (? z))
   (отец (? z) (? y)))
  ((брат (? x) (? y))
   (отец (? x) (? отец))
   (отец (? y) (? отец))
   (м (? y))
   (noteq (? x) (? y)))
  ((сестра (? x) (? y))
   (отец (? x) (? отец))
   (отец (? y) (? отец))
   (ж (? y))
   (noteq (? x) (? y)))
  ((муж (? жена) (? муж))
   (отец (? дитя) (? муж))
   (мать (? дитя) (? жена)))
  ((жена (? муж) (? жена))
   (отец (? дитя) (? муж))
   (мать (? дитя) (? жена)))
  ((теща (? муж) (? мать))
   (жена (? муж) (? жена))
   (мать (? жена) (? мать)))
  ((дядя (? а) (? брат))
   (родитель (? а) (? род))
   (брат (? род) (? брат)))
  ((тетя (? а) (? сестра))
   (родитель (? а) (? род))
   (сестра (? род) (? сестра)))
  ((кузен (? а) (? б))
   (дедушка (? а) (? дед))
   (дедушка (? б) (? дед))
   (noteq (? а) (? б)))
  ((деверь (? жена) (? бр))             ;брат мужа (здесь)
   (муж (? жена) (? муж))
   (брат (? муж) (? бр)))
  ((шурин (? муж) (? бр))
   (жена (? муж) (? жена))
   (брат (? жена) (? бр)))

;; факты (у них отсутствуют условия)

((отец лена юра))
((отец юра константин))
((отец даша максим))
((мать даша юля))
((мать юля любовь))
((отец юля саша))
((отец костя саша))
((мать лена галя))
((мать ваня лена))
((отец ваня коля))
((мать галя нина))
((мать максим галя))
((отец максим юра))
((отец виталя константин))
((отец серега виталя))
((мать серега наташа))
((отец люба константин))
((мать надя люба))

((м максим))
((м юра))
((м константин))
((м костя))
((м виталя))
((м серега))
((м ваня))
((м саша))
((м коля))

((ж лена))
((ж галя))
((ж нина))
((ж люба))
((ж любовь))
((ж наташа))
((ж надя))
((ж даша))
((ж юля))

))

